//----IGNORE----
//USE GANACHE CLI NOT GUI

// Getting this errer using windows, # github.com/ethereum/go-ethereum/crypto/secp256k1
// cgo: C compiler "gcc" not found: exec: "gcc": executable file not found in %PATH%

package main

import (
	"context"
	"crypto/ecdsa"
	"fmt"
	"log"
	"math/big"

	client "ethlisbon-2023/web3"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/crypto"

	//  "github.com/ethereum/go-ethereum/ethclient"
	"ethlisbon-2023/configs"
	// contract "pipeline/storage"
	index "ethlisbon-2023/index"
)

func main() {
	client := client.Client()
	PRIVATE_KEY := configs.GoDotEnvVariable("PRIVATEKEY") // Senders private key
	senderPrivateKey, err := crypto.HexToECDSA(PRIVATE_KEY)
	if err != nil {
		fmt.Println(err)
	}

	publicKey := senderPrivateKey.Public()
	publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
	if !ok {
		fmt.Println("error casting public key to ECDSA")
	}
	fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		fmt.Println("Failed to get nonce:", err)
		return
	}
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		panic(err)
	}

	auth, err := bind.NewKeyedTransactorWithChainID(senderPrivateKey, chainID)
	if err != nil {
		panic(err)
	}
	// Get the gas price from the network
	gasPrice := big.NewInt(2000000000)
	//gasPrice, err := client.SuggestGasPrice(context.Background())
	//if err != nil {
	//	fmt.Println("Failed to get gas price:", err)
	//	return
	//}
	// Create the transaction
	auth.Nonce = big.NewInt(int64(nonce))

	auth.Value = big.NewInt(0) // in wei
	auth.GasLimit = uint64(50000000)
	auth.GasPrice = gasPrice

	//input := "1.0"
	address, tx, instance, err := index.DeployIndex(auth, client)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Smart contract address: ", address.Hex())
	fmt.Println("Transaction hash: ", tx.Hash().Hex())
	_ = instance

}
